//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Jake Hirzel on 9/7/16.
//  Copyright Â© 2016 Jake Hirzel. All rights reserved.
//
//  Abstract: The root view controller shown by the messages app.

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    // MARK: Properties
    
    @IBOutlet var squareCollection: [UIButton]!
    
    // Initialize instance of MoveParser and GameLogic; set up new board
    let parser = MoveParser()
    let game = GameLogic()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        // Clear the board view
        for square in squareCollection {
            square.setTitle("?", for: UIControlState.normal)
        }
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    // MARK: Actions
    
    @IBAction func squareTapped(_ sender: UIButton) {
        
        let move = parser.parseCoordinates(playerNumber: 1, spacePlayed: sender)
        let validMove = game.playTurn(board: &game.board, move: move)
        
        if validMove == true {

            // Change the label on the square
            sender.setTitle("X", for: UIControlState.normal)

            // Check for a win
            let win = game.checkForWin(board: game.board, move: move)
            
            // Process a win, if true
            if win == true {
                print("You win!")
            }
            
            // Begin the image capture for the message bubble
            UIGraphicsBeginImageContextWithOptions(view.bounds.size, false, 0.0)
            
            // Snapshot the view for the image
            self.view.drawHierarchy(in: view.bounds, afterScreenUpdates: true)
            
            // Create a message
            let message = MSMessage()
            
            let layout = MSMessageTemplateLayout()
            layout.caption = "Test"
            layout.subcaption = "Test"
            layout.image = UIGraphicsGetImageFromCurrentImageContext()!
            
            // End image capture
            UIGraphicsEndImageContext()
            
            message.layout = layout
            
            guard let conversation = activeConversation else { fatalError("Expected an active converstation!") }
            conversation.insert(message)
            
        }
        
    }

}
